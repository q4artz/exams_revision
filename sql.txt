## MySQL

| **Command**   | **Description**   |
| --------------|-------------------|

| **General** |

## Installation
|   sudo apt-get install mariadb-server ((Debian))
| sudo pacman -S mariadb-server or yay mariadb ((Arch)
| sudo systemctl start mysql

## Connect to MySQL
| `mysql -u root -p` (( to connect to mysql db -- safe way))
| `mysql -u root -p<password>` ((not safe because password might be kept in log or term history))
| `mysql -u root -h docker.hackthebox.eu -P 3306 -p` | login to mysql database |

| `SHOW DATABASES` | List available databases |
| `USE users` | Switch to database |

| **Tables** |
| `CREATE TABLE logins (id INT, ...)` | Add a new table |
| `SHOW TABLES` | List available tables in current database |
| `DESCRIBE logins` | Show table properties and columns |
| `INSERT INTO table_name VALUES (value_1,..)` | Add values to table |
| `INSERT INTO table_name(column2, ...) VALUES (column2_value, ..)` | Add values to specific columns in a table |
| `UPDATE table_name SET column1=newvalue1, ... WHERE <condition>` | Update table values |

| **Columns** |
| `SELECT * FROM table_name` | Show all columns in a table |
| `SELECT column1, column2 FROM table_name` | Show specific columns in a table |
| `DROP TABLE logins` | Delete a table |
| `ALTER TABLE logins ADD newColumn INT` | Add new column |
| `ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn` | Rename column |
| `ALTER TABLE logins MODIFY oldColumn DATE` | Change column datatype |
| `ALTER TABLE logins DROP oldColumn` | Delete column |

| **Output** |
| `SELECT * FROM logins ORDER BY column_1` | Sort by column |
| `SELECT * FROM logins ORDER BY column_1 DESC` | Sort by column in descending order |
| `SELECT * FROM logins ORDER BY column_1 DESC, id ASC` | Sort by two-columns |
| `SELECT * FROM logins LIMIT 2` | Only show first two results |
| `SELECT * FROM logins LIMIT 1, 2` | Only show first two results starting from index 2 |
| `SELECT * FROM table_name WHERE <condition>` | List results that meet a condition |
| `SELECT * FROM logins WHERE username LIKE 'admin%'` | List results where the name is similar to a given string |


|**Set Prim or For keys**|
|SELECT * FROM usr WHERE thing LIKE thing2  PRIMARY KEY (thing) |

## MySQL Operator Precedence
* Division (`/`), Multiplication (`*`), and Modulus (`%`)
* Addition (`+`) and Subtraction (`-`)
* Comparison (`=`, `>`, `<`, `<=`, `>=`, `!=`, `LIKE`)
* NOT (`!=`) // not equals to!! same as other languages 
// TRUE is converted to false and False is converted to TRUE;

* AND (`&&`)
* OR (`||`)

-----------------
| Keywords |
----------------
CREATE //(Creating Database) 		
							CREATE DATABASE dbname
							
				(Creating Table)
							CREATE TABLE employees (
									employee_id INT,
									first_name VARCHAR(50), 		// VARCHAR is string
									last_name VARCHAR(50),
									hourly_pay DECIMAL(5,2),		// 5 digit and 2 decimal .2
									hire_date DATE ;						
							)

RENAME		// (renaming table)		RENAME TABLE employees TO employees_table;

SELECT // SELECT * FROM blah blah or SELECT  FROM 
				 (Selecting variables from table) -- SELECT first_name, last_name FROM employees

FROM

LIKE // Basically the == in other languages

INSERT  // (inseting Multiple rows into table) -- INSERT INTO employees
																			 VALUES (1,"John","Smith",10.00,"2022-02-02"),
																  						   (2, “Micheal”,"Mitch",12.00,"2023-03-04");
					
					(ONLY inserting limited data) -- INSERT INTO employees (employee_id, first_name, last_name)
																		VALUE (3,"micky","micheal"), 
																					(4,"Johnny","Johnson");

UPDATE	// Update specific records within table (!! Different from ALTER !!)
					(update something if condition met) -- UPDATE table_name SET column1=newvalue1, column2=newvalue2, ... WHERE <condition>;
					(updating value from password varaible to change_password if id is 1 ) -- UPDATE logins SET password = 'change_password' WHERE id > 1;
					

DROP  // (Deleting anything) --  DROP FROM employees;
				(Delete Specific row) -- DROP FROM employees
													  WHERE employees_id LIKE 6;

ADD	 // (adding new column) -- ALTER TABLE employees
														 ADD fire_date DATE; 

ALTER		// 	change properties of table (( adding new col, renaming columns ))
					( adding new col )	-- ALTER TABLE logins ADD newColumn INT;
					( Renaming col )	-- ALTER TABLE logins RENAME oldColumn TO newColumn;
					(Dropping col)		-- ALTER TABLE logins DROP newColumn;

 MODIFY	// (Changeing Datatype of col)	-- ALTER TABLE logins MODIFY COLUMN olcColumn DATE; 
																	-- ALTER TABLE employees MODIFY employee_name VARCHAR(150); 

DATE / TIME 	// (create table with date and time) -- CREATE TABLE timetable(
																							today_date DATE;
																							today_time TIME;
																							today_date_time DATETIME;																						
																						);
						 (Inserting Today's DATE and TIME) -- INSERT INTO timetable
																					  VALUES(CURRENT_DATE(), CURRENT_TIME(), NOW());

UNIQUE	// (adding unique value when creating table) -- CREATE TABLE table1(
																								product_id INT,
																								product_name VARCHAR(50) UNIQUE,
																								price DECIMAL(5,2)																								
																								) ;
					(adding unique value after table created) -- ALTER TABLE table1
																							ADD CONSTRAINT
																							UNIQUE(product_name); 

PRIMARY KEY // (create primary key in new table) -- CREATE TABLE test(
																						test_column INT PRIMARY KEY,
																						amount DECIMAL(5,2)																						
																						);
					(assign primary key after table created) -- ALTER TABLE test
																							ADD CONSTRAINT
																							PRIMARY KEY(amount)

AUTO_INCREMENT // (auto increment when creating table) -- CREATE TABLE transaction(
																	 								 transaction_id INT PRIMARY KEY AUTO_INCREMENT,
																	 								 price DECIMAL(5,2)		
																									 );
									(INSERT new row of auto increment) -- INSERT INTO transaction (amount)
																									VALUES (4.99);
			
FOREIGN KEYS // primary key in a table that can be find in another table
							(creating table with foreign keys) -- CREATE TABLE transaction (
																							transaction_id INT PRIMARY KEY,
																							amount DECIMAL(5,2),
																							customer_id INT,
																							FOREIGN_KEY(customer_id) REFERENCES employees(customer_id);																				
																						)
						(apply foreign key to table alrd exist) -- ALTER TABLE transaction
																						 ADD CONSTRAINTS fk_customer_id // need no need also can;
																						FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
UNION
COUNT() // return all column count-- SELECT COUNT(amount)
																WHERE transactions;

MAX() // find maximum value -- SELECT MAX(amount) AS maximum
													 FROM transactions;
													
MIN() // find minimum value -- SELECT MIN(amount) AS minimum
													FROM transactions;
AVG()			^^^
SUM()  			^^^

ORDER BY // (list stuff order by ASC or DESC) -- SELECT * FROM employees
																				ORDER BY last_name DESC; or ASC; 
LIMIT()


% == Use as a wildcard. like the grep *.c from bash
_ == Match exactly one character ((SELECT * FROM logins WHERE username like '___'; )) 
		// in that example the query request uname to be 3 characters _ _ _; 




------------------
Chapter 1
---------------Main Use of DBMS in Organization
	
	Enterprise Applications
			- ERP 
				- Integrates system across an enterprise 
						- streamline workflow 
						- Share info to diff departments
						- Provide insight into business operations
				- Data warehousing Implementations
						- reporting and data analysis
						- integrate data from one or more sources
							- to create a central repository data
				-Big data Analytics
						- process of collecting , organizing , analyzing large sets of data
							- to discover pattern and useful info
							
				- Data 
						- Raw facts about something or event				
				- Information 
						- Transformed data that is important to decision making
				- knowledge 
						- Form multiple infomation > analysis > Decision making/strategic planning/statement
	
	DataBase Characteristics
				
				- persistent
						- Last a long time
						- Data is stored to persistent media ; once store it can be retrieve when needed
				
				- Inter-Related
						- Stores entities and relationships of entities
						- Entity : data about a topic( Customer, student,loan )
				
				- Shared
						- Multiple Users: many data entry screens and reports
												 Many ppl use database at the same time 		
	
	Purpose of Database System
				
				- Negative
						- Difficult to reprogram ( backup and recovery,security )
						- Changing old system to this can be expensive and error-prone
				
				- affect
						- Data redundancy and inconsistent
						- multiple files /format
						- New program to carry out new task
						- integrity constraints 
						
	Advantages of DBMS---




-------------------------
Chapter 2
-------------------------
Data VS Information

| Data | Infomation |
| Raw facts
  - not processed to reveal anything yet | Produced by Processing Data |
| Building blocks of Infomations | Reveal meaning of Data |
| Used for Data Management | Able to aid in good decision making |
 

Types of DataBases
	- Single User
			- Support only 1 user at a time

	- Desktop
			- Single-user Database running on a PC

	- Multi-user
			- Supports multiple users at same time

	- Workgroup
			- Multi-user DB
			- Support small grp  
			- single department

	- Enterprise
			- Multi-user DB
			- Support large grp 
			- Entire organization

Locations of Database
	- Centralized
			- Support data located at single site
			
	- Distributed
			- supports data distributed across several site

Uses of Database
	- Transactional 
			- Support company everyday operation
	- Data Warehousing
			- Store data used to generate info to make strategic decisions
			- often store historical data

Database Design Importances
	- Diff approach needed for diff type of DB
	- avoid redundant data ( duplications )
	- avoid poor decision making due to poor design
	
Manual File System
	- File folders kept in file cabinet
	- time consuming
 
 Manual File System to Computer File System
 	- Require to hire Data processing specialist
 			- they write software / design appli program
 
 Problem with file System Data Management
 		- Require extensive programming with 3GL
 				- Must specify how to done
 		- Modern DB use 4GL
 				- no need to say how to done
3GL
		- Time consuming
		- access path become difficult ot manage as system become complex
		- Sys admin hard when number of files increase
		- security feature hard to program so often left out

Structural and DB dependence
		- Structural dependence 
				- Access to a file depend on its struct
		- Data dependence 
				- Change in DB struct affect program ability to access data 
				- Logical data format (human view)
				- Physical data format (computer view)

Data redundancy
		- result in data inconsistency
		- error more likely to occur

DBMS functions
		- Perform functions that guarantee integrity and consistency of data
				- Data dictionary management
						- define data element and relationship
				- data storage management 
						- store data entry form, report
				- Data transformation and presentation
						- translate logical request into commands 
				- Data integrity management 
						- Promotes and enforces integrity rules
				- Database access languages and application programming interfaces
				- Database communication interfaces




--------------------
Chapter 4
--------------------
Data Model 
	- Representation, graphical of real world data structure

Data modeling
	- Process of creating a specific data model for a problem to deterine what data and relationships should be stored in the database 


Importance of Data Models
	
	1. communication tool to aid interaction among sys designers, programmers and users
	
	2. Good DB design use appropriate data model as foundation
	
	3. End users have diff view of data. Data model provide whole view of data
	
	4. Data model organizes data for various users who have diff need for data


Business Rules

	Business rule is Brief, Precise and unambiguous description of a policy,procedure or principle within org
	
	Main Src of Business rule 
	== Company managers, policy makers, department managers and written documentation 
	== company procedures, standards and operation manuals.
	
	direct interview with end users	
		++ Faster/direct src
		-- Less accurate when specifying business rules
		-- get different perceptions of what jobs components are
		
		Examples
			== Customer make many payment , each payment only credited to one customer
			
			== business trip dest must be 100m away so airline ticket can be bought
			
Importance of Business Rules
	
	1. Allow DB designer  -- develop relationship participation rules and constraints to create an accurate data model
	
	2. Standardize the company's view of data
	
	3. communication tool between users and DB designers
	
	4. allow DB designers to understand nature,role,scope of data 
	
	5. help designers understand business processes
	
Characteristics of Hierachical Model


 
 
 
 
-----------------------------
Chapter 5
-----------------------------
Database Tables and Normalization

	Normalization
		--  Help eliminate data anomalies
		-- Divide large tables into smaller (extraction)
		-- focux on characteristics of specific entities
				
		3 stages of normal forms
				-- 1NF ,2NF, 3NF (normal form)
				-- most business use 3NF
		
	Unnormalized
		- cause UPDATE problems
		- cause INSERT problem
		- Cause DELETE problem
	-- Normalized Solve all those problems
	
	Fixing Normalization Violations
		- Tables
			-- create new table
			-- rename original table
		- Relationships
			-- establish relationship between tables
		- Fields
			-- Transfer the fields and rename
		- Kays
			-- choose PK and FK for all tables
	
	
	Determinants
		- important concept of Normalization
		- field or group that control/determine value in other field
				- in another exp, email is Determinats becus know email will know other value (1 email, 1name,num,addr)
				
	Unique of Determinants Value
		- in relation only if it determines every other column in relation ((Cannot find determinants of all functional dependencies by looking at unique value of one column))
		
	Functional Dependency
		- value of one set of attribute determine the value of another set of attribute
		StudentID -> (Student name/Dormroom/fee)
		- May be based on equations but not requations
		
		
	Composite Determinants
		- a determinants of a functional dependency that consist of more than one attribute
	
	Candidate Keys
		- determine all of the other col in relation
	
	Primary Keys	
		- primary means of identifying rows in relation	
	
	Surrogate Keys
		- artificial column added to a relation to serve as a prim key
		
	Foreign Key
		- 



----------------------
Chapter 6
----------------------
Views
	- Database object
			- not real table
	- no data of their own
	
	Advantages of Views
		- security (user can only see part of the table)
		- Consistency (present unchanged data of struct of db even if source table is split/restructed/renamed)
		- Data Integrity (DBMS auto check if data accessed meet specified integrity constraints)
		
	Disavantages of Views
		Performance
			--	If view is complex, the process time is long (DBMS need to translate queries)
			
|| Syntax to creating View ||

	CREATE VIEW employee_attendence AS
	SELECT first_name, last_name
	FROM employee;
1. (We create a VIEW first like TABLE named employee_attendences AS)
2. (SELECT the table content then from the employee table)
		
		Update Restrictions

Outer Join
		
		
Relational Set Operators
